// scss modules
@use 'sass:map';
// use theme-config file
@use './theme-config.scss' as config;

// color classes for text, bg, border
@each $name, $value in config.$theme-colors {
  @if type-of($value) ==map {
    // text-color
    .text-#{$name} {
      color: map.get($value, '600') !important;
    }

    // bg-color
    .bg-#{$name} {
      background: map.get($value, '600') !important;
    }

    // border-color
    .border-#{$name} {
      border-color: map.get($value, '600') !important;
    }

    // stroke-color
    .stroke-#{$name} {
      stroke: map.get($value, '600') !important;
    }

    @each $variant, $color in $value {
      // text-color
      .text-#{$name}-#{$variant} {
        color: $color !important;
      }

      // bg-color
      .bg-#{$name}-#{$variant} {
        background: $color !important;
      }

      // border-color
      .border-#{$name}-#{$variant} {
        border-color: $color !important;
      }

      // stroke-color
      // stroke-color
      .stroke-#{$name}-#{$variant} {
        stroke: $color !important;
      }
    }
  } @else {
    // text-color
    .text-#{$name} {
      color: $value !important;
    }

    // bg-color
    .bg-#{$name} {
      background: $value !important;
    }

    // border-color
    .border-#{$name} {
      border-color: $value !important;
    }

    // stroke-color
    .stroke-#{$name} {
      stroke: $value !important;
    }
  }
}

// border, border-width and border-radius classes
.border {
  border-width: 1px;
  border-style: solid;
}

.border-2 {
  border-width: 2px;
  border-style: solid;
}

.border-4 {
  border-width: 4px;
  border-style: solid;
}

.border-8 {
  border-width: 8px;
  border-style: solid;
}

.border-accent {
  border-color: $accent !important;
}

@each $side, $side-value in config.$box-sides {
  .border-#{$side} {
    border-#{$side-value}-width: 1px;
    border-#{$side-value}-style: solid;
  }

  .border-#{$side}-2 {
    border-#{$side-value}-width: 2px;
    border-#{$side-value}-style: solid;
  }

  .border-#{$side}-4 {
    border-#{$side-value}-width: 4px;
    border-#{$side-value}-style: solid;
  }

  .border-#{$side}-8 {
    border-#{$side-value}-width: 8px;
    border-#{$side-value}-style: solid;
  }
}

// rounded-borders classes - taking sizes from flex-gutter (upto 5xl)
@each $size, $value in $flex-gutter {
  .rounded-borders-#{$size} {
    border-radius: $value !important;
  }
}

.rounded-borders-full {
  border-radius: 100vw !important;
}

// font family classes
.font {
  &-inter {
    font-family: 'Inter', sans-serif;
  }

  &-libre {
    font-family: 'Libre Baskerville', serif;
  }
}

// parent dom styles
html,
body {
  @extend .font-inter;
  word-break: break-word;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

// disable outline
* {
  outline: none;
}

// anchor tag overrides
a {
  &,
  &:hover,
  &:focus,
  &:active,
  &:visited {
    color: inherit;
    text-decoration: none;
  }
}

// typography helper classes
.text-underline {
  text-decoration: underline;
}

// input placeholder color overrides
.q-input {
  .q-placeholder {
    &::placeholder {
      color: $grey-500;
    }
  }
}

// input borderless overrides
.q-input.q-field--borderless {
  .q-field__control {
    padding: 0 14px;
    height: 50px;
    background: white;
    border-radius: 8px;
    .q-field__prepend {
      height: 44px;
    }

    .q-field__append {
      height: 44px;
    }
  }

  .q-field__bottom {
    padding-top: 6px;
    color: $grey-500;
  }
}

// textarea borderless overrides
.q-textarea.q-field--borderless {
  .q-field__control {
    padding: 0 14px;
    background: white;
    border-radius: 8px;
    box-shadow: 0px 1px 2px 0px rgba($grey-900, 0.1);
  }

  .q-field__bottom {
    padding-top: 6px;
    color: $grey-500;
  }
}

// input borderd overrides
.q-input.q-field--outlined {
  .q-field__control {
    padding: 0 14px;
    height: 52px;
    background: white;
    border-radius: 8px;

    &::before {
      border: 1px solid $grey-300;
    }

    .q-placeholder {
      padding: 10px 0;
    }

    .q-field__prepend {
      height: 52px;
    }

    .q-field__append {
      height: 44px;
    }
  }

  .q-field__bottom {
    padding: 6px 0 0 0;
    color: $grey-500;
  }
}

// textarea outlined override
.q-textarea.q-field--outlined {
  .q-field__control {
    padding: 0 14px;
    background: white;
    border-radius: 8px;
    box-shadow: 0px 1px 2px 0px rgba($grey-900, 0.1);

    &::before {
      border: 1px solid $grey-300;
    }

    .q-placeholder {
      padding: 8px 0;
    }
  }

  .q-field__bottom {
    padding-top: 6px;
    color: $grey-500;
  }
}

// Fix for header ios safe area padding
// constant & env work only for iOS
// Do not apply same settings for android as it is setting the padding to 0
body.platform-ios {
  .q-layout--standard {
    .q-header {
      padding-top: constant(safe-area-inset-top); // for iOS 11.0
      padding-top: env(safe-area-inset-top); // for iOS 11.2 +

      & > .q-toolbar:nth-child(1) {
        padding: 0; // safe area taken care in q-header
        min-height: 20px; // defining height for toolbar
      }
    }

    .q-footer {
      padding-bottom: constant(safe-area-inset-bottom); // for iOS 11.0
      padding-bottom: env(safe-area-inset-bottom); // for iOS 11.2 +
    }
  }

  // q-dialog inner padding override
  .q-dialog__inner {
    padding: 0 !important;
  }
}

// Loading spinner thickness overrides
.q-loading {
  .q-loading__spinner {
    .path {
      stroke-width: 2 !important;
    }
  }
}

.q-dialog {
  // background backdrop override for dialog backdrop
  .q-dialog__backdrop {
    background: rgba($dark, 0.3) !important;
    backdrop-filter: blur(8px) !important;
  }
}

// Override toolbar style
.q-toolbar {
  min-height: 20px;
}

// Override q-item style
.q-item {
  min-height: 24px;
  padding: 16px;

  .q-item__section--side.q-item__section--avatar {
    min-width: 24px;
    padding-left: 0;
    padding-right: 16px;
  }

  .q-item__section--side {
    min-width: 20px;
    padding-left: 24px;
  }
}

.q-item.q-px-none {
  padding-left: 0;
  padding-right: 0;
}

.q-item.q-py-none {
  padding-top: 0;
  padding-bottom: 0;
}

// Override toggle button style
.q-toggle__inner {
  padding: 0.18em;

  .q-toggle__track {
    height: 0.68em;
    border-radius: 1em;
  }

  .q-toggle__thumb {
    left: 0.26em;
    top: 0.26em;
  }

  &.q-toggle__inner--truthy {
    .q-toggle__track {
      opacity: 1;
    }

    .q-toggle__thumb {
      color: white;
      left: 0.65em;
    }
  }
}

// min height, width classes
.min-h-0 {
  min-height: 0;
}

.min-w-0 {
  min-width: 0;
}

// custom overrides for notification types
.tf-notification {
  @each $type in config.$notification-types {
    $type-colors-map: map.get(config.$theme-colors, $type);
    $type-color-25: map.get($type-colors-map, '25');
    $type-color-50: map.get($type-colors-map, '50');
    $type-color-100: map.get($type-colors-map, '100');
    $type-color-300: map.get($type-colors-map, '300');
    $type-color-500: map.get($type-colors-map, '500');
    $type-color-600: map.get($type-colors-map, '600');
    $type-color-700: map.get($type-colors-map, '700');

    &[role='#{$type}'] {
      margin: 16px;
      // [TODO pending]: handle margin-bottom according to the footer height
      margin-bottom: 90px;
      width: calc(100% - 32px);
      border: 1px solid $type-color-300;
      background: $type-color-25;
      box-shadow: 0px 12px 16px -4px rgba($grey-900, 0.1),
        0px 4px 6px -2px rgba($grey-900, 0.05);

      // svg override
      svg {
        fill: none;
        stroke-width: 2;
        stroke: currentColor;
        stroke-linecap: round;
        stroke-linejoin: round;
      }

      .q-notification__content {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: flex-start;

        .q-notification__avatar {
          position: relative;
          margin-bottom: 12px;
          font-size: 48px;
          background: $type-color-100;
          color: $type-color-600;
          // border: 8px solid $type-color-50;
          // outline: 8px solid $type-color-50;
          // outline-offset: -4px;
          // INFO: adding ::before pseudo element for outline effect - outline not working on safari browsers
          display: flex;
          align-items: center;
          justify-content: center;

          &::before {
            content: '';
            box-sizing: content-box;
            position: absolute;
            width: calc(1em - 4px);
            height: calc(1em - 4px);
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background: transparent;
            border-radius: 100vw;
            border: 8px solid $type-color-50;
          }

          .q-avatar__content {
            width: 1em;
            height: 1em;
          }
        }

        .q-notification__message {
          width: 100%;
          padding: 0;
          font-size: 1rem;
          line-height: 1.5rem;
          letter-spacing: 0.03125em;
          font-weight: 500;
          color: $type-color-700;

          .q-notification__caption {
            margin-top: 2px;
            font-weight: 400;
            color: $type-color-600;
          }
        }
      }

      .q-notification__actions {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0;

        .q-btn.close-btn {
          padding: 0;
          font-size: 20px;
          @extend .min-h-0;
          color: $type-color-500;
        }
      }
    }
  }

  // create notification override for fave/ ask
  &[role='create'] {
    margin: 8px 16px;
    @extend .min-h-0;
    width: calc(100% - 32px);
    background: $primary-100;
    padding: 8px 12px 8px 8px;
    border-radius: 100vw;
    position: relative;

    // svg override
    svg {
      fill: none;
      stroke-width: 2;
      stroke: currentColor;
      stroke-linecap: round;
      stroke-linejoin: round;
    }

    .q-notification__content {
      padding-right: 32px;
      flex-wrap: nowrap;

      .q-notification__message {
        display: flex;
        align-items: center;
        flex-wrap: nowrap;
        font-size: 0.875rem;
        line-height: 1.25rem;
        letter-spacing: 0.01786em;
        font-weight: 500;
        padding: 0;
        & > div:first-of-type {
          padding: 2px 10px;
          border-radius: 100vw;
          background: $primary;
          color: #fff;
        }
        .q-notification__caption {
          margin-left: 12px;
          color: $grey-900;
        }
      }
    }

    .q-notification__actions {
      position: absolute;
      top: 50%;
      right: 0;
      padding: 0;
      transform: translateY(-50%);

      .q-btn.close-btn {
        padding: 0;
        font-size: 20px;
        @extend .min-h-0;
      }
    }
  }
}

.card-shadow {
  box-shadow: 0px 4px 8px -2px rgba($grey-900, 0.1),
    0px 2px 4px -2px rgba($grey-900, 0.06);
}

.component-shadow {
  box-shadow: 0px 1px 2px 0px rgba($grey-900, 0.1);
}

// Google mains container shadow
.map-container {
  filter: drop-shadow(0px 1px 3px rgba(16, 24, 40, 0.1))
    drop-shadow(0px 1px 2px rgba(16, 24, 40, 0.06));
}

.footer-shadow {
  box-shadow: 0px -2px 8px 0px rgba(#000, 0.1);
}

.ggprofile-icon {
  width: 24px;
  height: 24px;
}
